#!/bin/bash

# Step 1
gh issue create --title "Step 1: Initialize Project Structure" --body $'## Description\nCreate the initial project structure with all necessary configuration files and directories.\n\n## Acceptance Criteria\n- [ ] package.json created with basic dependencies\n- [ ] Directory structure set up (server/, client/)\n- [ ] .gitignore file for Node.js projects\n- [ ] Basic README.md with project description\n- [ ] All files use ES modules syntax\n\n## Technical Notes\n- Use "type": "module" in package.json\n- Include express, dotenv, cors as dependencies\n- Include nodemon and @types/node as dev dependencies\n\n## Dependencies\nNone - this is the first step\n\n## Complexity\n**Small** - Basic setup task\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 2
gh issue create --title "Step 2: Set Up Express Server" --body $'## Description\nCreate a minimal Express server with basic configuration and health check endpoint.\n\n## Acceptance Criteria\n- [ ] Express server runs on port 5080 (configurable)\n- [ ] Binds to 127.0.0.1 by default\n- [ ] Health check endpoint at GET /api/health\n- [ ] Environment variable configuration\n- [ ] Proper error handling middleware\n\n## Technical Notes\n- Use ES module imports\n- Include CORS for local development\n- Add security headers\n- Create .env.example file\n\n## Dependencies\n- Requires Step 1 to be completed\n\n## Complexity\n**Small** - Basic Express setup\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 3
gh issue create --title "Step 3: Set Up Vite and Vue" --body $'## Description\nConfigure Vite build tool and Vue 3 for the frontend application.\n\n## Acceptance Criteria\n- [ ] Vite configuration with Vue plugin\n- [ ] Basic Vue app that mounts successfully\n- [ ] Proxy configuration for /api routes\n- [ ] Hot module replacement working\n- [ ] Dev server runs on port 5173\n\n## Technical Notes\n- Configure proxy to forward /api to localhost:5080\n- Create client/index.html entry point\n- Set up proper project structure\n\n## Dependencies\n- Requires Step 2 to be completed\n\n## Complexity\n**Small** - Standard Vite/Vue setup\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 4
gh issue create --title "Step 4: Configure Tailwind CSS" --body $'## Description\nSet up Tailwind CSS with custom 70s-inspired color palette and dark mode support.\n\n## Acceptance Criteria\n- [ ] Tailwind CSS configured and working\n- [ ] Custom color palette implemented\n- [ ] Automatic light/dark mode switching\n- [ ] CSS custom properties for themes\n- [ ] PostCSS configuration complete\n\n## Technical Notes\n- Light mode: cream, olive, taupe, sienna colors\n- Dark mode: charcoal, deep olive, dark taupe colors\n- Use @media (prefers-color-scheme) for detection\n\n## Dependencies\n- Requires Step 3 to be completed\n\n## Complexity\n**Small** - CSS configuration task\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 5
gh issue create --title "Step 5: Create Base Layout" --body $'## Description\nBuild the base layout components for the mobile-first chat interface.\n\n## Acceptance Criteria\n- [ ] AppHeader component with fixed positioning\n- [ ] MessageArea with scrollable container\n- [ ] InputArea fixed at bottom\n- [ ] Proper flex layout in App.vue\n- [ ] Responsive on mobile viewports\n\n## Technical Notes\n- Header height: 3rem\n- Use Tailwind utilities for styling\n- Ensure no overlapping elements\n- Test on mobile viewport sizes\n\n## Dependencies\n- Requires Step 4 to be completed\n\n## Complexity\n**Small** - Basic component creation\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 6
gh issue create --title "Step 6: Create Message Components" --body $'## Description\nBuild the message components for the chat interface.\n\n## Acceptance Criteria\n- [ ] MessageBubble component with role, content, timestamp props\n- [ ] Different styles for user/assistant/error messages\n- [ ] Proper message alignment and colors\n- [ ] Auto-scroll functionality\n- [ ] Smooth animations\n\n## Technical Notes\n- User messages: right-aligned, olive color\n- Assistant messages: left-aligned, taupe color\n- Error messages: red-tinted styling\n- Use Vue 3 Composition API\n\n## Dependencies\n- Requires Step 5 to be completed\n\n## Complexity\n**Medium** - Component with multiple states\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 7
gh issue create --title "Step 7: Implement Input Handling" --body $'## Description\nCreate the input handling functionality with auto-expanding textarea.\n\n## Acceptance Criteria\n- [ ] Multi-line textarea that expands (2-5 lines)\n- [ ] Enter sends, Shift+Enter for new line\n- [ ] Send button with disabled states\n- [ ] Input validation and trimming\n- [ ] Focus management\n\n## Technical Notes\n- Calculate height based on scrollHeight\n- Prevent default on Enter key\n- Clear input after sending\n- Mobile keyboard testing required\n\n## Dependencies\n- Requires Step 6 to be completed\n\n## Complexity\n**Medium** - Complex keyboard handling\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 8
gh issue create --title "Step 8: Add Loading States" --body $'## Description\nImplement loading indicators for better UX.\n\n## Acceptance Criteria\n- [ ] "Claude is thinking..." indicator\n- [ ] Pulsing animation\n- [ ] Loading message in chat flow\n- [ ] Disabled input during loading\n- [ ] Smooth transitions\n\n## Technical Notes\n- Temporary message bubble for loading\n- Fade in/out animations\n- Maintain scroll position\n- Test with artificial delays\n\n## Dependencies\n- Requires Step 7 to be completed\n\n## Complexity\n**Small** - UI state management\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 9
gh issue create --title "Step 9: Integrate Claude CLI" --body $'## Description\nCreate the backend service for Claude CLI integration.\n\n## Acceptance Criteria\n- [ ] Spawn Claude CLI process correctly\n- [ ] Parse JSON output format\n- [ ] Handle errors and timeouts\n- [ ] Input sanitization\n- [ ] Clean service interface\n\n## Technical Notes\n- Use --output-format json flag\n- 30 second timeout\n- Escape special characters\n- Prevent command injection\n\n## Dependencies\n- Requires Step 8 to be completed\n\n## Complexity\n**Large** - Critical integration piece\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 10
gh issue create --title "Step 10: Connect Frontend to Backend" --body $'## Description\nWire up the complete chat flow end-to-end.\n\n## Acceptance Criteria\n- [ ] POST /api/chat endpoint working\n- [ ] Frontend API service created\n- [ ] Messages sent and received\n- [ ] Error handling throughout\n- [ ] Complete flow tested\n\n## Technical Notes\n- Validate request body\n- Proper HTTP status codes\n- Request/response logging\n- Handle all error cases\n\n## Dependencies\n- Requires Step 9 to be completed\n\n## Complexity\n**Medium** - Integration work\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 11
gh issue create --title "Step 11: Implement Session Storage" --body $'## Description\nAdd session management to the backend.\n\n## Acceptance Criteria\n- [ ] In-memory session storage\n- [ ] Session ID generation\n- [ ] Message history tracking\n- [ ] Session cleanup logic\n- [ ] Integration with Claude CLI\n\n## Technical Notes\n- Use crypto.randomUUID()\n- Limit to 100 messages per session\n- 24 hour session lifetime\n- Pass --resume flag to CLI\n\n## Dependencies\n- Requires Step 10 to be completed\n\n## Complexity\n**Medium** - State management\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 12
gh issue create --title "Step 12: Add Session Endpoints" --body $'## Description\nCreate the session API endpoints.\n\n## Acceptance Criteria\n- [ ] GET /api/sessions endpoint\n- [ ] GET /api/session/:id endpoint\n- [ ] Proper error handling\n- [ ] RESTful design\n- [ ] Integration with chat endpoint\n\n## Technical Notes\n- Sort sessions by lastActive\n- Include message count\n- Format timestamps consistently\n- Handle missing sessions\n\n## Dependencies\n- Requires Step 11 to be completed\n\n## Complexity\n**Small** - REST endpoints\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 13
gh issue create --title "Step 13: Frontend Session Integration" --body $'## Description\nIntegrate session management in the frontend.\n\n## Acceptance Criteria\n- [ ] Load session from localStorage\n- [ ] Fetch message history on load\n- [ ] Update sessionId from responses\n- [ ] New chat functionality\n- [ ] Handle expired sessions\n\n## Technical Notes\n- Use Vue composables\n- Restore scroll position\n- Clear session on new chat\n- Graceful error handling\n\n## Dependencies\n- Requires Step 12 to be completed\n\n## Complexity\n**Medium** - State persistence\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 14
gh issue create --title "Step 14: Error Handling" --body $'## Description\nImplement comprehensive error handling.\n\n## Acceptance Criteria\n- [ ] Error message component\n- [ ] Retry functionality\n- [ ] Different error types\n- [ ] User-friendly messages\n- [ ] Consistent error format\n\n## Technical Notes\n- Network, API, timeout errors\n- Exponential backoff\n- Error logging\n- Actionable error messages\n\n## Dependencies\n- Requires Step 13 to be completed\n\n## Complexity\n**Medium** - Error states\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

# Step 15
gh issue create --title "Step 15: Polish and Testing" --body $'## Description\nFinal polish and testing setup.\n\n## Acceptance Criteria\n- [ ] TypeScript declarations added\n- [ ] Basic test suite created\n- [ ] Mobile optimizations complete\n- [ ] Performance improvements\n- [ ] Documentation updated\n\n## Technical Notes\n- Vitest for testing\n- Message virtualization\n- Bundle optimization\n- Real device testing\n\n## Dependencies\n- Requires Step 14 to be completed\n\n## Complexity\n**Large** - Final polish\n\n## Implementation Prompt\nSee plan.md for detailed LLM prompt'

echo "All issues created!"